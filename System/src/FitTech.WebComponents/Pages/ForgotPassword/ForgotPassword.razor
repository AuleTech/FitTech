@page "/ForgotPassword"
@layout EmptyLayout
@inherits FitTech.WebComponents.Components.CancellableComponent;
@inject IUserService UserService;
@inject NavigationManager Navigation
@attribute [AllowAnonymous]

<div class="relative min-h-screen w-full">
    <!-- Franja superior naranja -->
    <div
        class="absolute top-0 left-0 w-full h-1/2 bg-gradient-to-b from-gray-800 to-zinc-900 z-0 flex items-center justify-center">
        <h1 class="text-white text-4xl font-black uppercase tracking-widest">RECUPERAR CONTRASEÑA</h1>

        <!-- Puzzle decorativo arriba derecha -->
        <div class="absolute top-6 right-6 space-y-2">
            <div class="w-16 h-1 rotate-45 bg-white"></div>
            <div class="w-16 h-1 rotate-45 bg-cyan-300"></div>
            <div class="w-10 h-1 rotate-45 bg-white"></div>
        </div>
    </div>

    <!-- Fondo blanco en la mitad inferior -->
    <div class="absolute bottom-0 left-0 w-full h-1/2 bg-white z-0"></div>

    <!-- Formulario centrado sobre la división -->
    <div class="relative z-10 flex items-center justify-center min-h-screen px-4">
        <div class="w-full max-w-md bg-white p-8 rounded-lg">
            <EditForm Model="ForgotPasswordModel" OnValidSubmit="Submit" FormName="RecoveryForm">

                <DataAnnotationsValidator/>

                <div class="mb-4">
                    <InputText type="text" @bind-Value="ForgotPasswordModel!.Email" id="email"
                               placeholder="Correo Electrónico"
                               class="w-full px-4 py-2 bg-gray-100 text-sm text-black focus:outline-none focus:ring-2 focus:ring-green-700 rounded-lg"/>
                    <ValidationMessage For="@(() => ForgotPasswordModel!.Email)" class="text-red-600 text-sm"/>
                </div>

                <button type="submit"
                        class="w-full bg-gray-400 hover:bg-green-700 focus:ring-green-700 rounded-lg text-white font-bold uppercase py-2 transition duration-200">
                    Recuperar
                </button>
                @if (!string.IsNullOrEmpty(_message))
                {
                    <p class="mt-3" style="color: @(_message.Contains("Error") ? "red" : "green")">
                        @(_message)
                    </p>
                }

            </EditForm>
        </div>
    </div>
</div>

@code
{
    [SupplyParameterFromForm] private ForgotPasswordModel? ForgotPasswordModel { get; set; }
    private string _message = string.Empty;

    protected override void OnInitialized()
    {
        ForgotPasswordModel ??= new ForgotPasswordModel();
    }

    private async Task Submit()
    {
        var response = await UserService.ForgotPasswordAsync(ForgotPasswordModel!.Email, _cts.Token);

        if (!response!.Succeeded)
        {
            _message = "Hubo un error en el envío del email. Intentalo de  nuevo más tarde.";
            StateHasChanged();
            return;
        }

        //TODO: Just until emails are send
        Navigation.NavigateTo($"/resetpassword?token={response.Value}&email={ForgotPasswordModel.Email}");
    }
} 