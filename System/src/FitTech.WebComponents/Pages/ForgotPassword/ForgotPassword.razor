@page "/ForgotPassword"
@layout EmptyLayout
@inherits FitTech.WebComponents.Components.CancellableComponent;
@inject IUserService UserService;
@inject NavigationManager Navigation
@attribute [AllowAnonymous]

<div class="w-full max-w-md px-4">
    <div
        class="rounded-md border border-gray-300 bg-white p-6 shadow-md dark:border-gray-700 dark:bg-gray-800 dark:shadow-none">
        <div class="mb-6 text-center">
            <h2 class="mt-4 text-2xl font-bold text-black dark:text-white">Recuperar Contraseña</h2>
        </div>
        <EditForm Model="ForgotPasswordModel" OnValidSubmit="Submit" FormName="RecoveryForm">

            <DataAnnotationsValidator/>

            <div class="mb-4">
                <label for="email" class="mb-2 block text-sm font-bold text-gray-700 dark:text-gray-300">Email</label>
                <InputText type="text" @bind-Value="ForgotPasswordModel!.Email" id="email"
                           class="w-full rounded border border-gray-300 bg-gray-100 px-3 py-2 text-black focus:ring-2 focus:ring-blue-500 focus:outline-none dark:border-gray-600 dark:bg-gray-700 dark:text-white"/>
                <ValidationMessage For="@(() => ForgotPasswordModel!.Email)" class="text-red-600 text-sm"/>
            </div>

            <button type="submit"
                    class="w-full rounded bg-green-600 py-2 text-white transition-colors hover:bg-green-700">Recuperar
            </button>
            @if (!string.IsNullOrEmpty(_message))
            {
                <p class="mt-3" style="color: @(_message.Contains("Error") ? "red" : "green")">
                    @(_message)
                </p>
            }

        </EditForm>
    </div>
</div>

@code
{
    [SupplyParameterFromForm] private ForgotPasswordModel? ForgotPasswordModel { get; set; }
    private string _message = string.Empty;

    protected override void OnInitialized()
    {
        ForgotPasswordModel ??= new ForgotPasswordModel();
    }

    private async Task Submit()
    {
        var response = await UserService.ForgotPasswordAsync(ForgotPasswordModel!.Email, _cts.Token);

        if (!response!.Succeeded)
        {
            _message = "Hubo un error en el envío del email. Intentalo de  nuevo más tarde.";
            StateHasChanged();
            return;
        }

        //TODO: Just until emails are send
        Navigation.NavigateTo($"/resetpassword?token={response.Value}&email={ForgotPasswordModel.Email}");
    }
} 