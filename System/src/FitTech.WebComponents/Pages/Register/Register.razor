@page "/register"
@layout EmptyLayout
@inherits FitTech.WebComponents.Components.CancellableComponent
@inject IUserService UserService
@inject NavigationManager Navigation
@attribute [AllowAnonymous]

<div class="w-full max-w-md px-4">
    <div
        class="rounded-md border border-gray-300 bg-white p-6 shadow-md dark:border-gray-700 dark:bg-gray-800 dark:shadow-none">
        <div class="mb-6 text-center">
            <h2 class="mt-4 text-2xl font-bold text-black dark:text-white">Registrate en FitTech</h2>
        </div>
        <EditForm Model="RegisterModel" OnValidSubmit="RegisterFuncion" FormName="RegisterForm">

            <DataAnnotationsValidator/>

            <div class="mb-4">
                <label for="nombre" class="mb-2 block text-sm font-bold text-gray-700 dark:text-gray-300">
                    Nombre
                </label>
                <InputText type="text" @bind-Value="RegisterModel!.FirstName" id="firstName"
                           class="w-full rounded border border-gray-300 bg-gray-100 px-3 py-2 text-black focus:ring-2 focus:ring-blue-500 focus:outline-none dark:border-gray-600 dark:bg-gray-700 dark:text-white"/>
                <ValidationMessage For="@(() => RegisterModel.FirstName)" class="text-red-600 text-sm"/>
            </div>

            <div class="mb-4">
                <label for="apellidos" class="mb-2 block text-sm font-bold text-gray-700 dark:text-gray-300">
                    Apellidos
                </label>
                <InputText type="text" @bind-Value="RegisterModel!.LastName" id="lastName"
                           class="w-full rounded border border-gray-300 bg-gray-100 px-3 py-2 text-black focus:ring-2 focus:ring-blue-500 focus:outline-none dark:border-gray-600 dark:bg-gray-700 dark:text-white"/>
                <ValidationMessage For="@(() => RegisterModel.LastName)" class="text-red-600 text-sm"/>
            </div>

            <div class="mb-4">
                <label for="email" class="mb-2 block text-sm font-bold text-gray-700 dark:text-gray-300">
                    Email
                </label>
                <InputText type="text" @bind-Value="RegisterModel!.Email" id="email"
                           class="w-full rounded border border-gray-300 bg-gray-100 px-3 py-2 text-black focus:ring-2 focus:ring-blue-500 focus:outline-none dark:border-gray-600 dark:bg-gray-700 dark:text-white"/>
                <ValidationMessage For="@(() => RegisterModel.Email)" class="text-red-600 text-sm"/>
            </div>

            <div class="mb-4">
                <label for="password" class="mb-2 block text-sm font-bold text-gray-700 dark:text-gray-300">
                    Contraseña
                </label>
                <InputText type="password" @bind-Value="RegisterModel!.Password" id="password"
                           class="w-full rounded border border-gray-300 bg-gray-100 px-3 py-2 text-black focus:ring-2 focus:ring-blue-500 focus:outline-none dark:border-gray-600 dark:bg-gray-700 dark:text-white"/>
                <ValidationMessage For="@(() => RegisterModel.Password)" class="text-red-600 text-sm"/>
            </div>

            <div class="mb-4">
                <label for="confirmpassword" class="mb-2 block text-sm font-bold text-gray-700 dark:text-gray-300">
                    Repetir Contraseña
                </label>
                <InputText type="password" @bind-Value="RegisterModel!.ConfirmPassword" id="confirmPassword"
                           class="w-full rounded border border-gray-300 bg-gray-100 px-3 py-2 text-black focus:ring-2 focus:ring-blue-500 focus:outline-none dark:border-gray-600 dark:bg-gray-700 dark:text-white"/>
                <ValidationMessage For="@(() => RegisterModel.ConfirmPassword)" class="text-red-600 text-sm"/>
            </div>

            <button type="submit"
                    class="w-full rounded bg-green-600 py-2 text-white transition-colors hover:bg-green-700">Registrarme
            </button>
            @if (!string.IsNullOrEmpty(_message))
            {
                <p class="mt-3" style="color: @(_message.Contains("Error") ? "red" : "green")">
                    @(_message)
                </p>
            }
        </EditForm>
    </div>
</div>

@code
{
    [SupplyParameterFromForm] private RegisterModel? RegisterModel { get; set; }

    private string _message = string.Empty;

    protected override void OnInitialized()
    {
        RegisterModel ??= new RegisterModel();
    }


    private async Task RegisterFuncion()
    {
        var response = await UserService.RegisterAsync(RegisterModel!.Email, RegisterModel.Password, _cts.Token);

        if (!response!.Succeeded)
        {
            _message = "Hubo un error en el registro. Intentalo de  nuevo.";
            return;
        }

        _message = "Te has registrado con éxito. ¡Bienvenido a FitTech!";
        StateHasChanged();
        await Task.Delay(2000);
        Navigation.NavigateTo("/login");
    }

}

   
 