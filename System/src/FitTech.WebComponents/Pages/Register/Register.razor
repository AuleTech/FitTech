@page "/register"
@layout EmptyLayout
@inherits FitTech.WebComponents.Components.CancellableComponent
@inject IUserService UserService
@inject NavigationManager Navigation
@attribute [AllowAnonymous]

<div class="relative min-h-screen w-full">
    <!-- Franja superior naranja -->
    <div class="absolute top-0 left-0 w-full h-1/2 bg-gradient-to-b from-green-400 to-green-700 z-0 flex items-center justify-center">
        <h1 class="text-white text-4xl font-black uppercase tracking-widest">Registrate en FitTech</h1>

        <!-- Puzzle decorativo arriba derecha -->
        <div class="absolute top-6 right-6 space-y-2">
            <div class="w-16 h-1 rotate-45 bg-white"></div>
            <div class="w-16 h-1 rotate-45 bg-cyan-300"></div>
            <div class="w-10 h-1 rotate-45 bg-white"></div>
        </div>
    </div>

    <!-- Fondo blanco en la mitad inferior -->
    <div class="absolute bottom-0 left-0 w-full h-1/2 bg-white z-0"></div>

    <!-- Formulario centrado sobre la división -->
    <div class="relative z-10 flex items-center justify-center min-h-screen px-4">
        <div class="w-full max-w-md bg-white p-8 rounded-lg">
            <EditForm Model="RegisterModel" OnValidSubmit="RegisterFuncion" FormName="RegisterForm">
                <DataAnnotationsValidator />

                <div class="mb-4">
                    <InputText type="text" @bind-Value="RegisterModel!.FirstName" placeholder="Nombre"
                        class="w-full px-4 py-2 bg-gray-100 text-sm text-black focus:outline-none focus:ring-green-700 rounded-lg" />
                    <ValidationMessage For="@(() => RegisterModel.FirstName)" class="text-red-600 text-sm mt-1" />
                </div>

                <div class="mb-4">
                    <InputText type="text" @bind-Value="RegisterModel!.LastName" placeholder="Apellidos"
                        class="w-full px-4 py-2 bg-gray-100 text-sm text-black focus:outline-none focus:ring-green-700 rounded-lg" />
                    <ValidationMessage For="@(() => RegisterModel.LastName)" class="text-red-600 text-sm mt-1" />
                </div>

                <div class="mb-4">
                    <InputText type="email" @bind-Value="RegisterModel!.Email" placeholder="Correo electrónico"
                        class="w-full px-4 py-2 bg-gray-100 text-sm text-black focus:outline-none focus:ring-green-700 rounded-lg" />
                    <ValidationMessage For="@(() => RegisterModel.Email)" class="text-red-600 text-sm mt-1" />
                </div>

                <div class="mb-4">
                    <InputText type="password" @bind-Value="RegisterModel!.Password" placeholder="Contraseña"
                        class="w-full px-4 py-2 bg-gray-100 text-sm text-black focus:outline-none focus:ring-green-700 rounded-lg" />
                    <ValidationMessage For="@(() => RegisterModel.Password)" class="text-red-600 text-sm mt-1" />
                </div>

                <div class="mb-6">
                    <InputText type="password" @bind-Value="RegisterModel!.ConfirmPassword" placeholder="Repetir contraseña"
                        class="w-full px-4 py-2 bg-gray-100 text-sm text-black focus:outline-none focus:ring-2 focus:ring-green-700 rounded-lg" />
                    <ValidationMessage For="@(() => RegisterModel.ConfirmPassword)" class="text-red-600 text-sm mt-1" />
                </div>

                <button type="submit"
                    class="w-full bg-gray-400 hover:bg-green-700 focus:ring-green-700 rounded-lg text-white font-bold uppercase py-2 transition duration-200">
                    Registrarme
                </button>

                @if (!string.IsNullOrEmpty(_message))
                {
                    <p class="mt-4 text-center text-sm font-semibold"
                        style="color: @(_message.Contains("Error") ? "red" : "green")">
                        @_message
                    </p>
                }
            </EditForm>
        </div>
    </div>
</div>
@code
{
    [SupplyParameterFromForm] private RegisterModel? RegisterModel { get; set; }

    private string _message = string.Empty;

    protected override void OnInitialized()
    {
        RegisterModel ??= new RegisterModel();
    }


    private async Task RegisterFuncion()
    {
        var response = await UserService.RegisterAsync(RegisterModel!.Email, RegisterModel.Password, _cts.Token);

        if (!response!.Succeeded)
        {
            _message = "Hubo un error en el registro. Intentalo de  nuevo.";
            return;
        }

        _message = "Te has registrado con éxito. ¡Bienvenido a FitTech!";
        StateHasChanged();
        await Task.Delay(2000);
        Navigation.NavigateTo("/login");
    }

}

   
 