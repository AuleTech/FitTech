@page "/ConfigurationUserPage"
@using FitTech.WebComponents.Pages.ConfigurationPage.ConfigurationModels
@inherits FitTech.WebComponents.Components.CancellableComponent
@inject IUserService UserService


<div class="relative max-w-2xl mx-auto px-4">
    <!-- Título centrado -->
    <h1 class="text-zinc-900 text-4xl font-black uppercase tracking-widest text-center mb-6">
        EDITAR ALIAS
    </h1>

    <!-- Formulario centrado horizontalmente -->
    <div class="flex items-center justify-center">
        <div class="w-full max-w-md bg-white p-8 rounded-lg shadow-lg">
            <EditForm Model="configurationUserModel" FormName="CostumerForm">
                <DataAnnotationsValidator/>

                <div class="mb-4">
                    <InputText type="text" @bind-Value="configurationUserModel!.Name" id="firstName"
                               placeholder="Nombre"
                               class="w-full px-4 py-2 bg-gray-100 text-sm text-black focus:outline-none focus:ring-2 focus:ring-green-700 rounded-lg"/>
                    <ValidationMessage For="@(() => configurationUserModel!.Name)" class="text-red-600 text-sm"/>
                </div>

                <div class="mb-4">
                    <InputText type="text" @bind-Value="configurationUserModel!.Email" id="email"
                               placeholder="Correo Electrónico"
                               class="w-full px-4 py-2 bg-gray-100 text-sm text-black focus:outline-none focus:ring-2 focus:ring-green-700 rounded-lg"/>
                    <ValidationMessage For="@(() => configurationUserModel!.Email)" class="text-red-600 text-sm"/>
                </div>

                <div class="flex justify-end gap-4 mt-6">
                    <button
                        class="w-full bg-gray-400 hover:bg-green-700 text-white font-bold uppercase py-2 transition duration-200 rounded-lg"
                        @onclick="SaveChanges">
                        Guardar Cambios
                    </button>
                    <button type="button" class="text-gray-400 hover:underline">Cancelar</button>
                </div>

                @if (!string.IsNullOrEmpty(_message))
                {
                    <p class="mt-3" style="color: @(_message.Contains("Error") ? "red" : "green")">
                        @(_message)
                    </p>
                }
            </EditForm>
        </div>
    </div>
</div>

@code {
    private ConfigurationUserModel configurationUserModel { get; } = new();
    private string _message = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        var response = await UserService.GetTrainerDataAsync(_cts.Token);

        if (response.Succeeded)
        {
            configurationUserModel.Name = response.Value!.Name!;
            configurationUserModel.Email = response.Value!.Email!;
        }
        else
        {
            _message = "Hubo un error en la recuperación de los datos del usuario";
        }
    }

    protected async Task SaveChanges()
    {
        var response = await UserService.SaveChangesConfiguration(configurationUserModel.Name, configurationUserModel.Email, configurationUserModel.Password, _cts.Token);

        if (!response.Succeeded)
        {
            _message = "Hubo un error en la recuperación de los datos del usuario";
            return;
        }

        _message = "Los cambios se han guardado correctamente.";
        StateHasChanged();
    }


}
