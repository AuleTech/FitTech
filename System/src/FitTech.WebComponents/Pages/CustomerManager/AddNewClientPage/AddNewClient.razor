@page "/usermanager/add"
@inject IUserService UserService
@using FitTech.WebComponents.Pages.CustomerManager.CustomerManagerModels
@inject NavigationManager Navigation
@inherits FitTech.WebComponents.Components.CancellableComponent


<div class="h-full w-full ml-64 p-6">
    <!-- Título principal -->
    <div class="text-center">
        <h2 class="text-2xl font-semibold text-green-600 mb-8">
            Añadir un nuevo Cliente
        </h2>
    </div>

    <div class="rounded-md border border-gray-300 bg-white p-6 shadow-md dark:border-gray-700 dark:bg-gray-800 dark:shadow-none">
        <div class="w-full h-full px-4">
            <!-- Barra de pasos con líneas dinámicas -->
            <div class="flex items-center justify-between mb-6 relative mt-4">

                @for (int step = 1; step <= TotalSteps; step++)
                {
                    var isActive = step == CurrentStep;
                    var isCompleted = step < CurrentStep;

                    var circleClasses = isActive
                        ? "w-10 h-10 flex items-center justify-center rounded-full border-4 text-green-600 border-green-600 bg-white dark:bg-gray-800 font-bold"
                        : isCompleted
                            ? "w-10 h-10 flex items-center justify-center rounded-full border-4 text-white bg-green-600 font-bold"
                            : "w-10 h-10 flex items-center justify-center rounded-full border-4 border-gray-400 text-gray-400 bg-white dark:bg-gray-800 font-bold";

                    string titulo = step switch
                    {
                        1 => "Datos del Cliente",
                        2 => "Detalles del Entrenamiento",
                        3 => "Resumen",
                        _ => ""
                    };

                    <div class="relative flex-1 flex flex-col items-center z-10">
                        <!-- Línea desde el paso anterior (excepto para el paso 1) -->
                        @if (step > 1)
                        {
                            <div class="@($"absolute top-5 right-1/2 h-1 {(step <= CurrentStep ? "bg-green-600" : "bg-gray-300 dark:bg-gray-600")} z-[-1]")"
                                 style="width: calc(90% + 1.25rem);">
                            </div>
                        }

                        <!-- Círculo -->
                        <div class="@circleClasses">@step</div>

                        <!-- Título -->
                        <span class="mt-2 text-sm text-gray-700 dark:text-gray-200">@titulo</span>
                    </div>
                }
            </div>

            <!-- Contenido dinámico por paso -->
            @if (CurrentStep == 1)
            {
                <PersonalInformationForm Model="NewClient"></PersonalInformationForm>
                <div class="mt-6 flex justify-between">
                    <button @onclick="NextStep" class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700" disabled="@(CurrentStep == TotalSteps)">Siguiente</button>
                </div>
            }
            else if (CurrentStep == 2)
            {
                <DetailForm Model="NewClient"></DetailForm>
                <div class="mt-6 flex justify-between">
                    <button @onclick="PreviousStep" class="px-4 py-2 bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-white rounded" disabled="@(CurrentStep == 1)">Anterior</button>
                    <button @onclick="NextStep" class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700" disabled="@(CurrentStep == TotalSteps)">Siguiente</button>
                </div>
            }
            else if (CurrentStep == 3)
            {
                <ConfirmDataForm Model="NewClient"></ConfirmDataForm>
                <div class="mt-6 flex justify-between">
                    <button @onclick="PreviousStep" class="px-4 py-2 bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-white rounded" disabled="@(CurrentStep == 1)">Anterior</button>
                    <button class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700" @onclick="AddClient">Finalizar</button>
                </div>
            }

            @if (!string.IsNullOrEmpty(_message))
            {
                <p class="mt-3" style="color: @(_message.Contains("Error") ? "red" : "green")">
                    @(_message)
                </p>
            }
        </div>
    </div>
</div>


@code {
    
    private NewClientModel NewClient = new(); 
    
    private string _message = string.Empty;
    
    private int CurrentStep = 1;

    private readonly int TotalSteps = 3;

    private void NextStep()
    {
        if (CurrentStep < TotalSteps)
            CurrentStep++;
    }

    private void PreviousStep()
    {
        if (CurrentStep > 1)
            CurrentStep--;
    }

    public async Task AddClient()
    {

        var response = await UserService.AddNewClientAsync(NewClient.NameUser, NewClient.LastNameuser, NewClient.Birthdate, NewClient.EmailUser, NewClient.PhoneNumber!, NewClient.TrainingHours!, NewClient.TrainingModel, NewClient.Center, NewClient.Event, NewClient.SubscriptionType, _cts.Token);

        if (!response!.Succeeded)
        {
            _message = "Hubo un error en al añadir a su cliente. Intentalo de  nuevo."; 
            return;
        }
        _message = "El nuevo cliente se ha añadido correctamente"; 
        StateHasChanged();
        await Task.Delay(2000); 
        Navigation.NavigateTo("/usermanager");

    }

}