@page "/usermanager/add"
@inject IUserService UserService
@using System.ComponentModel.DataAnnotations
@using FitTech.WebComponents.Pages.CustomerManager.CustomerManagerModels
@inject NavigationManager Navigation
@inherits FitTech.WebComponents.Components.CancellableComponent


<DataAnnotationsValidator/>
<ValidationSummary/>
<div class="h-full w-full ml-80 p-6">
    <!-- Título principal -->
    <div class="text-center">
        <h2 class="text-4xl font-bold mt-[40px] mb-8">
            AÑADIR UN NUEVO CLIENTE
        </h2>
    </div>

    <div
        class="rounded-md border border-gray-300 bg-white p-6 shadow-md dark:border-gray-700 dark:bg-gray-800 dark:shadow-none">
        <div class="w-full h-full px-4">
            <!-- Barra de pasos con líneas dinámicas -->
            <div class="flex items-center justify-between mb-6 relative mt-4">

                @for (int step = 1; step <= TotalSteps; step++)
                {
                    var isActive = step == CurrentStep;
                    var isCompleted = step < CurrentStep;

                    var circleClasses = isActive
                        ? "w-10 h-10 flex items-center justify-center rounded-full border-4 text-green-600 border-green-600 bg-white dark:bg-gray-800 font-bold"
                        : isCompleted
                            ? "w-10 h-10 flex items-center justify-center rounded-full border-4 text-white bg-green-600 font-bold"
                            : "w-10 h-10 flex items-center justify-center rounded-full border-4 border-gray-400 text-gray-400 bg-white dark:bg-gray-800 font-bold";

                    string titulo = step switch
                    {
                        1 => "Datos del Cliente",
                        2 => "Detalles del Entrenamiento",
                        3 => "Resumen",
                        _ => ""
                    };

                    <div class="relative flex-1 flex flex-col items-center z-10">
                        <!-- Línea desde el paso anterior (excepto para el paso 1) -->
                        @if (step > 1)
                        {
                            <div
                                class="@($"absolute top-5 right-1/2 h-1 {(step <= CurrentStep ? "bg-green-600" : "bg-gray-300 dark:bg-gray-600")} z-[-1]")"
                                style="width: calc(90% + 1.25rem);">
                            </div>
                        }

                        <!-- Círculo -->
                        <div class="@circleClasses">@step</div>

                        <!-- Título -->
                        <span class="mt-2 text-sm text-gray-700 dark:text-gray-200">@titulo</span>
                    </div>
                }
            </div>

            <!-- Contenido dinámico por paso -->
            @if (CurrentStep == 1)
            {
                <PersonalInformationForm Model="_client"></PersonalInformationForm>
                <div class="mt-6 flex justify-between">
                    <button @onclick="ValidateStep1"
                            class="px-4 py-2 bg-gray-400 hover:bg-green-700 text-white font-bold uppercase transition duration-200 rounded-lg">Siguiente
                    </button>
                </div>
            }
            else if (CurrentStep == 2)
            {
                <DetailForm Model="_client"></DetailForm>
                <div class="mt-6 flex justify-between">
                    <button @onclick="PreviousStep"
                            class="px-4 py-2 bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-white rounded">
                        Anterior
                    </button>
                    <button @onclick="ValidateStep2"
                            class="px-4 py-2 bg-gray-400 hover:bg-green-700 text-white font-bold uppercase transition duration-200 rounded-lg">Siguiente
                    </button>
                </div>
            }
            else if (CurrentStep == 3)
            {
                <ConfirmDataForm Model="_client"></ConfirmDataForm>
                <div class="mt-6 flex justify-between">
                    <button @onclick="PreviousStep"
                            class="px-4 py-2 bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-white rounded">
                        Anterior
                    </button>
                    <button class="px-4 py-2 bg-gray-400 hover:bg-green-700 text-white font-bold uppercase transition duration-200 rounded-lg" @onclick="AddClient">
                        Finalizar
                    </button>
                </div>
            }

            @if (!string.IsNullOrEmpty(_message))
            {
                <p class="mt-3" style="color: @(_message.Contains("Error") ? "red" : "green")">
                    @(_message)
                </p>
            }

            @if (validationErrors.Any())
            {
                @foreach (var err in validationErrors)
                {
                    <p class="mt-3 text-red-500">
                        @err
                    </p>
                }
            }
        </div>
    </div>
</div>


@code {

    private ClientModel _client = new();
    private string _message = string.Empty;
    private int CurrentStep = 1;
    private readonly int TotalSteps = 3;
    private List<string> validationErrors = new();

    private void ValidateStep1()
    {
        validationErrors.Clear();
        var context = new ValidationContext(_client);
        var results = new List<ValidationResult>();

        bool isValid =
            Validator.TryValidateProperty(_client.Name, new ValidationContext(_client) { MemberName = nameof(_client.Name) }, results) &&
            Validator.TryValidateProperty(_client.LastName, new ValidationContext(_client) { MemberName = nameof(_client.LastName) }, results) &&
            Validator.TryValidateProperty(_client.PhoneNumber, new ValidationContext(_client) { MemberName = nameof(_client.PhoneNumber) }, results) &&
            Validator.TryValidateProperty(_client.Email, new ValidationContext(_client) { MemberName = nameof(_client.Email) }, results);

        if (isValid)
        {
            CurrentStep++;
        }
        else
        {
            validationErrors = results.Select(r => r.ErrorMessage!).ToList();
        }
    }

    private void ValidateStep2()
    {
        validationErrors.Clear();
        var context = new ValidationContext(_client);
        var results = new List<ValidationResult>();

        bool isValid =
            Validator.TryValidateProperty(_client.TrainingHours, new ValidationContext(_client) { MemberName = nameof(_client.TrainingHours) }, results) &&
            Validator.TryValidateProperty(_client.TrainingModel, new ValidationContext(_client) { MemberName = nameof(_client.TrainingModel) }, results) &&
            Validator.TryValidateProperty(_client.SubscriptionType, new ValidationContext(_client) { MemberName = nameof(_client.SubscriptionType) }, results);

        if (isValid)
        {
            CurrentStep++;
        }
        else
        {
            validationErrors = results.Select(r => r.ErrorMessage!).ToList();
        }
    }


    private void NextStep()
    {
        if (CurrentStep < TotalSteps)
            CurrentStep++;
        validationErrors.Clear();
    }

    private void PreviousStep()
    {
        if (CurrentStep > 1)
            CurrentStep--;
    }

    public async Task AddClient()
    {
        validationErrors.Clear();

        var response = await UserService.AddClientAsync(_client.Name, _client.LastName, _client.Birthdate, _client.Email, _client.PhoneNumber!, _client.TrainingHours!, _client.TrainingModel, _client.Center, _client.DateSportEvent, _client.SubscriptionType, _cts.Token);

        if (!response!.Succeeded)
        {
            _message = "Hubo un error en al añadir a su cliente. Intentalo de  nuevo.";
            return;
        }

        _message = "El nuevo cliente se ha añadido correctamente";
        StateHasChanged();
        await Task.Delay(2000);
        Navigation.NavigateTo("/usermanager");
    }

}

